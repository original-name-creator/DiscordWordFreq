/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.example.JSONobjects.Message;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;

public class App {

    final static String PATH = "C:\\Users\\lukes\\Downloads\\package(1)\\messages";

    public static void main(String[] args) {

        ObjectMapper objectMapper = new ObjectMapper();

        File[] directories = new File(PATH).listFiles(File::isDirectory);

        String[] dirnames = new String[directories.length];

        for (int i = 0; i < directories.length; i++) {
            dirnames[i] = directories[i].getAbsolutePath().replace(PATH  + "\\", "");
        }

        System.out.println(directories[0].getAbsolutePath());

        List<Message> messages = new ArrayList<>();


        try {
            for (int j = 0; j < directories.length; j++) {
                List<Message> tempList = objectMapper.readValue(new File(directories[j].getAbsolutePath() + "\\messages.json"), new TypeReference<List<Message>>(){});
                messages.addAll(tempList);
            }
        } catch (IOException e) {
            System.out.println("\u001B[31m" + "Failed to parse JSON, You figure it out" + "\u001B[0m");
            e.printStackTrace();
        }

        List<String> messageText = new ArrayList<>();

        for (int i = 0; i < messages.size(); i++) {
            messageText.add(messages.get(i).getContents() + " ");
        }

        List<String> words = new ArrayList<>();

        for (int i = 0; i < messageText.size(); i++) {
            List<String> tempList = new ArrayList<String>(Arrays.asList(messageText.get(i).split(" ")));
            words.addAll(tempList);
        }

        for (int i = 0; i < words.size(); i++) {
            //words.set(i, words.get(i).replaceAll("(.*\\!)*?", ""));
            words.set(i, words.get(i).replace("\"", ""));
            words.set(i, words.get(i).replace(".", ""));
            words.set(i, words.get(i).replace("\\", ""));
            words.set(i, words.get(i).replace("!", ""));
            words.set(i, words.get(i).replace("?", ""));
            words.set(i, words.get(i).replace("*", ""));
            words.set(i, words.get(i).replace("~", ""));
            words.set(i, words.get(i).replace("∩", ""));
            words.set(i, words.get(i).replace("┐", ""));
            words.set(i, words.get(i).replace("╜", ""));
            words.set(i, words.get(i).replace(",", ""));
            words.set(i, words.get(i).replace("'", ""));
            words.set(i, words.get(i).replace("’", ""));
            words.set(i, words.get(i).replace("(", ""));
            words.set(i, words.get(i).replace(")", ""));
            words.set(i, words.get(i).replace("/", ""));
            words.set(i, words.get(i).toLowerCase());
        }



        Map<String, Integer> counts = new HashMap<String, Integer>();

        for (int i = 0; i < words.size(); i++) {
            
            if(counts.containsKey(words.get(i))){
                counts.put(words.get(i), counts.get(words.get(i)) + 1);
            }
            else{
                counts.put(words.get(i), 1);
            }

        }


        try {
            FileWriter file = new FileWriter("phoebe-results.txt");
            file.write(counts.toString());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        

        


    }
}